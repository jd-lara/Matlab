classdef TCL < device
    %TCLv2
    %   Detailed explanation goes here
    
    properties
        % Physical and behavioral properties
        beta % [$/(°C)^2] Parameter that determines how consumers trade comfort v/s savings
        Oobj % [°C] Thermostat set point
        Omin % [°C] Min temperature
        Omax % [°C] Max temperature
        Pmin % [kW] Min power consumption
        Pmax % [kW] Max power consumption
        R    % [°C/kW] Thermal resistance
        C    % [kWh/°C] Thermal capacitance of the interior space  
        eta  % Heat rate (convetion: (+) for heating and (-) cooling)
        Oout % Vector of outside temperatures.
                        
        % Other parameters
        O1   % Matrix of power to temperature transformation
        O2   % Vector of power to temperature transformation
        
        % Math model parameters
        U     % Quadratic term in the utility function
        u     % Linear term in the utility function
        A     % Matrix of the constraint set
        b     % Vector of the constraint set
        d     % Exogenous demand
        
        % Other parameters
        label % Device label
        affects_utility % Whether the device impacts the utility function (1 yes, 0 not)
        affects_constraint % Whether the device modifies the feasible region (1 yes, 0 not)
        % If the device does not affect utility nor the feasble region, its
        % demand is exogenous.
        
        % Auxiliar parameters
        par
        
    end
    
    methods
        function obj = TCL(par, beta, Oobj, Omin, Omax, Pmin, Pmax, R, ...
                           C, eta, Oout, label)
            obj.par   = par;
            obj.beta  = beta;
            obj.Oobj  = Oobj;
            obj.Omin  = Omin;
            obj.Omax  = Omax;
            obj.Pmin  = Pmin;
            obj.Pmax  = Pmax;
            obj.Pmin  = Pmin;
            obj.R     = R;
            obj.C     = C;
            obj.eta   = eta;
            obj.Oout  = Oout;
            obj.label = label;
            obj.affects_utility = 1;
            obj.affects_constraint = 1;
            obj.gen_temp_transform();
            obj.gen_utility();
            obj.gen_constraint_set();
        end        
        function gen_temp_transform(obj)
            % This function defines the relationship between power and
            % temperature. It uses a first order thermal model.
            % The thermal model is the following
            % C*dO/dt = p(t)/eta - (O(t) - Oout(t))/R
            % The solution is
            % O_(t+dt) = a1*O_t + a2*Oout_t + a3*p_t (coeffs defined bellow)
            % It assumes that Oout and p are constant during dt.
            % Besides, it assumes that in each cycle the last period 
            % is equal to the first. 
            
            dt = 1;          % Time step in hour. 
            a1 = exp(-dt/obj.C/obj.R);
            a2 = 1 - a1;
            a3 = a2*obj.R/obj.eta;
            
            T = obj.par.T;
            
            % Temperature transformation O(p) = O1*p + O2
            M = eye(T)*a1^(T-1);
            for j = 1:T-1
                M = M + diag(ones(1,T-j),-j)*a1^(j-1);
                M = M + diag(ones(1,T-j), j)*a1^(T-1-j);
            end
            IW = eye(obj.par.W);
            M  = kron(IW, M/(1 - a1^T));
            obj.O1 = a3*M; 
            obj.O2 = a2*M*obj.Oout;
        end        
        function gen_utility(obj)
            % Generates the parameters of the utility associated to the TCL
            % Element of utility function
            % - 0.5*beta*(O(p) - Tobj)'*(O(p) - Tobj)
            O1 = obj.O1; O2 = obj.O2; Oobj = obj.Oobj; b = obj.beta;
            obj.U = - 0.5*b*O1'*O1;
            obj.u = + b*O1'*(O2 - Oobj);
        end        
        function gen_constraint_set(obj)
            % Constraints
            %            Omin <= O(p) <= Omax
            %            Pmin <= p    <= Pmax
            O1 = obj.O1; O2 = obj.O2; Omax = obj.Omax; Omin = obj.Omin;
            Pmax = obj.Pmax; Pmin = obj.Omin; e = obj.par.e; I = diag(e);
            
            % Output set A*p <= b;
            obj.A = [O1; -O1; I; -I];
            obj.b = [Omax*e - O2 ; - Omin*e + O2; Pmax*e  ; - Pmin*e];            
        end    
    end
    
end

